[tox]
isolated_build = True
requires = pip >= 21.3.1
envlist = mypy, clean, dev


[testenv]
setenv =
    PYTHONHASHSEED=2577074909
    MYPYPATH={toxinidir}/src/stubs
    TEST_RESULTS_DIR={toxinidir}/test-results
    JUNIT_TEST_RESULTS=junit-test-results.xml
deps =
    pytest
    pytest-cov
    -r requirements/dev.txt
use_develop = true
commands = pytest {posargs} --cov -vv --junitxml={env:TEST_RESULTS_DIR:test-results}/{env:JUNIT_TEST_RESULTS:junit-test-results.xml}


[testenv:dev]
basepython = {env:TOXPYTHON:python}


[testenv:test38]
basepython = {env:TOXPYTHON:python3.8}
deps =
    -r requirements/dev.txt
    pytest
commands = pytest {posargs} -vv


[testenv:run]
basepython = {env:TOXPYTHON:python}
deps = -r requirements/dev.txt
; commands = neural-style-transfer tests/data/canoe_water.jpg style-images/monet-w400-h300.jpg {posargs}
commands = neural-style-transfer tests/data/canoe_water.jpg style-images/van-gogh_starry-night-over-the-rhone-w400-h300.jpg {posargs}


## AUTOMATIONS
[testenv:gen-dev-reqs]
basepython = {env:TOXPYTHON:python}
deps =
    click
    attrs
    numpy>=1.21.0,<1.22.0
    imageio
    ; later versions of tensorflow require smaller version of numpy
    ; this smaller version of numpy had not yet implemented types (for mypy)
    tensorflow==2.2.0
skip_install = true
commands = pip freeze > {toxinidir}/requirements/dev.txt


## COVERAGE

[testenv:clean]
description = Clean the working directory from any previously computed code coverage results.
    Removes any data resulted from measuring code coverage. Useful before running the test suite
    with code coverage enabled.
deps = coverage
skip_install = true
commands = coverage erase

[testenv:report]
description = Show the most recently computed code coverage results.
deps = coverage
skip_install = true
commands = {posargs:coverage report}

[testenv:format-report]
description = Generate xml and html formatted files out of previously computed code coverage results.
deps = coverage
skip_install = true
commands =
    coverage xml
    coverage html



## STATIC TYPE CHECKING
[testenv:mypy]
description = Python source code type hints (mypy)
deps =
    attrs
    numpy
    imageio
    mypy
skip_install = true
commands =
    mypy {posargs} --follow-imports skip --install-types {toxinidir}/src/neural_style_transfer
    ; mypy {posargs} --install-types {toxinidir}/src/neural_style_transfer/utils
    ; mypy {posargs} --follow-imports skip  --install-types {toxinidir}/src/neural_style_transfer/disk_operations.py



## PYTHON PACKAGING

[testenv:check]
description = Check the code for compliance with best practises of Python packaging ecosystem (PyPI, pip, Distribute, etc).
deps =
    docutils
    readme-renderer
    pygments
    check-manifest
    pyroma
skip_install = true
commands =
    check-manifest
    pyroma -d {toxinidir}


[testenv:build]
description = Create/build the python package/distribution.
    Creates .tar.gz and .whl files in the 'dist' folder, that can be upload to a pypi index server.
basepython = {env:TOXPYTHON:python3}
deps =
    setuptools >= 40.0.0
skip_install = true
commands_pre =
    # Delete the 'dist' directory and its contents if found
    python -c 'import os; import shutil; exec("if os.path.exists(os.path.join(\"{toxinidir}\", \"dist\")):\n    shutil.rmtree(os.path.join(\"{toxinidir}\", \"dist\"))")'
commands =
    python setup.py sdist bdist_wheel


[testenv:deploy]
description = Deploy the python package to be hosted in a PyPi server. Requires the NEURAL_STYLE_TRANSFER_RELEASE_VERSION
    environment variable to contain the string that represents the semantic version (eg 0.5.3 or 1.0.0) under which
    to release the package to pypi. By default, deploys to the test-pypi server.
    If you want to deploy to the "production" pypi, then you have to set the PYPI_SERVER environment
    variable like `export PYPI_SERVER=pypi`. Also runs certain checks on the packaged distribution (.tar.gz and .whl)
deps =
    keyring==21.3.0
    twine==3.4.0
skip_install = true
commands_pre =
    # check whether the distributionâ€™s long description will render correctly on PyPI
    python -m twine check dist/neural[\-_]style[\-_]transfer-{env:NEURAL_STYLE_TRANSFER_RELEASE_VERSION:PLEASE_INDICATE_THE_SEM_VER_FOR_RELEASE}*
commands =
    python -m twine {posargs:upload --non-interactive} --repository {env:PYPI_SERVER:testpypi --skip-existing} dist/neural[\-_]style[\-_]transfer-{env:NEURAL_STYLE_TRANSFER_RELEASE_VERSION:PLEASE_INDICATE_THE_SEM_VER_FOR_RELEASE}* --verbose
